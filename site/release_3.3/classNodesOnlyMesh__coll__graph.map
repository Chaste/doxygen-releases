<map id="G" name="G">
<area shape="rect" id="node2" href="$classMutableMesh.html" title="{MutableMesh\&lt; SPACE_DIM, SPACE_DIM \&gt;\n|# mDeletedElementIndices\l# mDeletedBoundaryElementIndices\l# mDeletedNodeIndices\l# mAddedNodes\l|+ CheckIsVoronoi()\l+ MutableMesh()\l+ MutableMesh()\l+ ~MutableMesh()\l+ Clear()\l+ GetNumNodes()\l+ GetNumElements()\l+ GetNumBoundaryElements()\l+ RescaleMeshFromBoundaryNode()\l+ AddNode()\l+ AddElement()\l+ SetNode()\l+ MoveMergeNode()\l+ DeleteNode()\l+ DeleteElement()\l+ DeleteNodePriorToReMesh()\l+ RefineElement()\l+ DeleteBoundaryNodeAt()\l+ ReIndex()\l+ ReMesh()\l+ ReMesh()\l+ SplitLongEdges()\l+ SplitEdge()\l&#45; save()\l&#45; load()\l&#45; CheckIsVoronoi()\l}" alt="" coords="779,4966,1059,5578"/>
<area shape="rect" id="node4" href="$classTetrahedralMesh.html" title="{TetrahedralMesh\&lt; ELEMENT_DIM, SPACE_DIM \&gt;\n|# mElementWeightedDirections\l# mElementJacobians\l# mElementInverseJacobians\l# mElementJacobianDeterminants\l# mBoundaryElementWeightedDirections\l# mBoundaryElementJacobianDeterminants\l|+ TetrahedralMesh()\l+ ConstructFromMeshReader()\l+ ReadNodesPerProcessorFile()\l+ CheckIsConforming()\l+ GetVolume()\l+ GetSurfaceArea()\l+ RefreshMesh()\l+ PermuteNodes()\l+ PermuteNodes()\l+ GetContainingElementIndexWithInitialGuess()\l+ GetNearestElementIndex()\l+ GetContainingElementIndices()\l+ Clear()\l+ CalculateBoundaryOfFlaggedRegion()\l+ GetAngleBetweenNodes()\l+ UnflagAllElements()\l+ FlagElementsNotContainingNodes()\l+ RefreshJacobianCachedData()\l+ GetJacobianForElement()\l+ GetInverseJacobianForElement()\l+ GetWeightedDirectionForElement()\l+ GetWeightedDirectionForBoundaryElement()\l+ EdgesBegin()\l+ EdgesEnd()\l# SolveNodeMapping()\l# SolveElementMapping()\l# SolveBoundaryElementMapping()\l# ExportToMesher()\l# ImportFromMesher()\l# InitialiseTriangulateIo()\l# FreeTriangulateIo()\l&#45; serialize()\l}" alt="" coords="759,3454,1079,4215"/>
<area shape="rect" id="node42" href="$classMutableMesh.html" title="{MutableMesh\&lt; ELEMENT_DIM, SPACE_DIM \&gt;\n|# mDeletedElementIndices\l# mDeletedBoundaryElementIndices\l# mDeletedNodeIndices\l# mAddedNodes\l|+ MutableMesh()\l+ MutableMesh()\l+ ~MutableMesh()\l+ Clear()\l+ GetNumNodes()\l+ GetNumElements()\l+ GetNumBoundaryElements()\l+ RescaleMeshFromBoundaryNode()\l+ AddNode()\l+ AddElement()\l+ SetNode()\l+ MoveMergeNode()\l+ DeleteNode()\l+ DeleteElement()\l+ DeleteNodePriorToReMesh()\l+ RefineElement()\l+ DeleteBoundaryNodeAt()\l+ ReIndex()\l+ ReMesh()\l+ ReMesh()\l+ SplitLongEdges()\l+ SplitEdge()\l+ CheckIsVoronoi()\l+ RescaleMeshFromBoundaryNode()\l&#45; save()\l&#45; load()\l&#45; CheckIsVoronoi()\l}" alt="" coords="769,4267,1068,4898"/>
<area shape="rect" id="node6" href="$classAbstractTetrahedralMesh.html" title="{AbstractTetrahedralMesh\&lt; ELEMENT_DIM, SPACE_DIM \&gt;\n|# mMeshIsLinear\l# mElements\l# mBoundaryElements\l|+ GetElementIteratorBegin()\l+ GetElementIteratorEnd()\l+ AbstractTetrahedralMesh()\l+ ~AbstractTetrahedralMesh()\l+ GetNumElements()\l+ GetNumLocalElements()\l+ GetNumBoundaryElements()\l+ GetNumLocalBoundaryElements()\l+ GetNumAllElements()\l+ GetNumAllBoundaryElements()\l+ GetNumCableElements()\l+ GetNumVertices()\l+ GetMaximumNodeIndex()\l+ GetElement()\l+ GetBoundaryElement()\l+ ConstructFromMeshReader()\l+ ConstructFromMesh()\l+ GetBoundaryElementIteratorBegin()\l+ GetBoundaryElementIteratorEnd()\l+ GetInverseJacobianForElement()\l+ GetWeightedDirectionForBoundaryElement()\l+ CheckOutwardNormals()\l+ ConstructLinearMesh()\l+ ConstructRectangularMesh()\l+ ConstructCuboid()\l+ ConstructRegularSlabMesh()\l+ CalculateDesignatedOwnershipOfBoundaryElement()\l+ CalculateDesignatedOwnershipOfElement()\l+ CalculateMaximumNodeConnectivityPerProcess()\l+ GetHaloNodeIndices()\l+ CalculateNodeExchange()\l+ CalculateMinMaxEdgeLengths()\l+ GetContainingElementIndex()\l+ GetNearestElementIndexFromTestElements()\l# SetElementOwnerships()\l&#45; SolveElementMapping()\l&#45; SolveBoundaryElementMapping()\l&#45; save()\l&#45; load()\l}" alt="" coords="576,2363,944,3199"/>
<area shape="rect" id="node8" href="$classAbstractMesh.html" title="{AbstractMesh\&lt; ELEMENT_DIM, SPACE_DIM \&gt;\n|# mNodes\l# mBoundaryNodes\l# mpDistributedVectorFactory\l# mNodePermutation\l# mMeshFileBaseName\l# mMeshChangesDuringSimulation\l|+ GetNodeIteratorBegin()\l+ GetNodeIteratorEnd()\l+ AbstractMesh()\l+ ~AbstractMesh()\l+ GetNumNodes()\l+ GetNumBoundaryNodes()\l+ GetNumAllNodes()\l+ GetNumNodeAttributes()\l+ GetNode()\l+ GetNodeOrHaloNode()\l+ GetNodeFromPrePermutationIndex()\l+ ReadNodesPerProcessorFile()\l+ GetDistributedVectorFactory()\l+ SetDistributedVectorFactory()\l+ PermuteNodes()\l+ GetBoundaryNodeIteratorBegin()\l+ GetBoundaryNodeIteratorEnd()\l+ GetMeshFileBaseName()\l+ IsMeshOnDisk()\l+ rGetNodePermutation()\l+ GetVectorFromAtoB()\l+ GetDistanceBetweenNodes()\l+ GetWidth()\l+ CalculateBoundingBox()\l+ GetNearestNodeIndex()\l+ Scale()\l+ Translate()\l+ Translate()\l+ Rotate()\l+ Rotate()\l+ RotateX()\l+ RotateY()\l+ RotateZ()\l+ Rotate()\l+ RefreshMesh()\l+ IsMeshChanging()\l+ CalculateMaximumContainingElementsPerProcess()\l+ SetMeshHasChangedSinceLoading()\l# SetElementOwnerships()\l# CalculateBoundingBox()\l&#45; SolveNodeMapping()\l&#45; serialize()\l}" alt="" coords="661,1067,1008,2015"/>
<area shape="rect" id="node10" href="$classboost_1_1noncopyable.html" title="{boost::noncopyable\n||}" alt="" coords="1308,490,1447,579"/>
<area shape="rect" id="node12" href="$classDistributedVectorFactory.html" title="{DistributedVectorFactory\n|&#45; mLo\l&#45; mHi\l&#45; mProblemSize\l&#45; mNumProcs\l&#45; mPetscStatusKnown\l&#45; mGlobalLows\l&#45; mpOriginalFactory\l&#45; msCheckNumberOfProcessesOnLoad\l|+ DistributedVectorFactory()\l+ DistributedVectorFactory()\l+ DistributedVectorFactory()\l+ DistributedVectorFactory()\l+ ~DistributedVectorFactory()\l+ CreateVec()\l+ CreateVec()\l+ CreateDistributedVector()\l+ IsGlobalIndexLocal()\l+ GetLocalOwnership()\l+ GetHigh()\l+ GetLow()\l+ GetProblemSize()\l+ GetNumProcs()\l+ GetOriginalFactory()\l+ SetOriginalFactory()\l+ SetFromFactory()\l+ rGetGlobalLows()\l+ SetCheckNumberOfProcessesOnLoad()\l+ CheckNumberOfProcessesOnLoad()\l&#45; CheckForPetsc()\l&#45; CalculateOwnership()\l&#45; serialize()\l}" alt="" coords="2332,219,2604,850"/>
<area shape="rect" id="node51" href="$classDistributedBoxCollection.html" title="{DistributedBoxCollection\&lt; SPACE_DIM \&gt;\n|&#45; mBoxes\l&#45; mHaloBoxes\l&#45; mHalosRight\l&#45; mHalosLeft\l&#45; mHaloNodesRight\l&#45; mHaloNodesLeft\l&#45; mBoxesMapping\l&#45; mHaloBoxesMapping\l&#45; mDomainSize\l&#45; mBoxWidth\l&#45; mNumBoxes\l&#45; mNumBoxesEachDirection\l&#45; mNumBoxesInAFace\l&#45; mLocalBoxes\l&#45; mMinBoxIndex\l&#45; mMaxBoxIndex\l&#45; mIsPeriodicInX\l&#45; mAreLocalBoxesSet\l&#45; mpDistributedBoxStackFactory\l&#45; mCalculateNodeNeighbours\l&#45; msFudge\l|+ DistributedBoxCollection()\l+ ~DistributedBoxCollection()\l+ EmptyBoxes()\l+ SetupHaloBoxes()\l+ UpdateHaloBoxes()\l+ GetNumLocalRows()\l+ GetBoxOwnership()\l+ IsInteriorBox()\l+ GetHaloBoxOwnership()\l+ CalculateGlobalIndex()\l+ CalculateContainingBox()\l+ CalculateContainingBox()\l+ CalculateCoordinateIndices()\l+ rGetBox()\l+ rGetHaloBox()\l+ GetNumBoxes()\l+ GetNumLocalBoxes()\l+ rGetDomainSize()\l+ GetAreLocalBoxesSet()\l+ GetBoxWidth()\l+ GetNumRowsOfBoxes()\l+ LoadBalance()\l+ SetupLocalBoxesHalfOnly()\l+ SetupAllLocalBoxes()\l+ GetLocalBoxes()\l+ IsOwned()\l+ IsOwned()\l+ GetProcessOwningNode()\l+ rGetHaloNodesRight()\l+ rGetHaloNodesLeft()\l+ SetCalculateNodeNeighbours()\l+ CalculateNodePairs()\l+ CalculateInteriorNodePairs()\l+ CalculateBoundaryNodePairs()\l+ AddPairsFromBox()\l+ CalculateNumberOfNodesInEachStrip()\l&#45; serialize()\l}" alt="" coords="3043,2214,3309,3349"/>
<area shape="rect" id="node70" href="$classDistributedBoxCollection.html" title="{DistributedBoxCollection\&lt; DIM \&gt;\n|&#45; mBoxes\l&#45; mHaloBoxes\l&#45; mHalosRight\l&#45; mHalosLeft\l&#45; mHaloNodesRight\l&#45; mHaloNodesLeft\l&#45; mBoxesMapping\l&#45; mHaloBoxesMapping\l&#45; mDomainSize\l&#45; mBoxWidth\l&#45; mNumBoxes\l&#45; mNumBoxesEachDirection\l&#45; mNumBoxesInAFace\l&#45; mLocalBoxes\l&#45; mMinBoxIndex\l&#45; mMaxBoxIndex\l&#45; mIsPeriodicInX\l&#45; mAreLocalBoxesSet\l&#45; mpDistributedBoxStackFactory\l&#45; mCalculateNodeNeighbours\l&#45; msFudge\l|+ DistributedBoxCollection()\l+ ~DistributedBoxCollection()\l+ EmptyBoxes()\l+ SetupHaloBoxes()\l+ UpdateHaloBoxes()\l+ GetNumLocalRows()\l+ GetBoxOwnership()\l+ IsInteriorBox()\l+ GetHaloBoxOwnership()\l+ CalculateGlobalIndex()\l+ CalculateContainingBox()\l+ CalculateContainingBox()\l+ CalculateCoordinateIndices()\l+ rGetBox()\l+ rGetHaloBox()\l+ GetNumBoxes()\l+ GetNumLocalBoxes()\l+ rGetDomainSize()\l+ GetAreLocalBoxesSet()\l+ GetBoxWidth()\l+ GetNumRowsOfBoxes()\l+ LoadBalance()\l+ SetupLocalBoxesHalfOnly()\l+ SetupAllLocalBoxes()\l+ GetLocalBoxes()\l+ IsOwned()\l+ IsOwned()\l+ GetProcessOwningNode()\l+ rGetHaloNodesRight()\l+ rGetHaloNodesLeft()\l+ SetCalculateNodeNeighbours()\l+ CalculateNodePairs()\l+ CalculateInteriorNodePairs()\l+ CalculateBoundaryNodePairs()\l+ AddPairsFromBox()\l+ CalculateNumberOfNodesInEachStrip()\l&#45; serialize()\l}" alt="" coords="3229,974,3493,2109"/>
<area shape="rect" id="node17" href="$classbool.html" title="{bool\n||}" alt="" coords="1163,6,1211,95"/>
<area shape="rect" id="node19" href="$classunsigned.html" title="{unsigned\n||}" alt="" coords="3773,6,3851,95"/>
<area shape="rect" id="node49" href="$classdouble.html" title="{double\n||}" alt="" coords="2247,490,2308,579"/>
</map>
